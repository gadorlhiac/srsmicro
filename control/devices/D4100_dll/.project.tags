!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
D4100_usb.cpp	D4100_usb.cpp	1;"	F
MAX_TRANSFER_SIZE	D4100_usb.cpp	/^#define MAX_TRANSFER_SIZE	/;"	d	file:
DLLVERSION_MAJOR	D4100_usb.cpp	/^#define DLLVERSION_MAJOR	/;"	d	file:
DLLVERSION_MINOR	D4100_usb.cpp	/^#define DLLVERSION_MINOR	/;"	d	file:
USB_VID_DEFAULT	D4100_usb.cpp	/^#define USB_VID_DEFAULT	/;"	d	file:
USB_PID_DEFAULT	D4100_usb.cpp	/^#define USB_PID_DEFAULT	/;"	d	file:
LOG_DATA	D4100_usb.cpp	/^#define LOG_DATA(/;"	d	file:
openDevice	D4100_usb.cpp	/^#define openDevice(/;"	d	file:
openDeviceOnce	D4100_usb.cpp	/^CCyUSBDevice *openDeviceOnce(short devNumber)$/;"	f	signature:(short devNumber)
closeDevice	D4100_usb.cpp	/^void closeDevice(CCyUSBDevice *dev)$/;"	f	signature:(CCyUSBDevice *dev)
openDeviceFunc	D4100_usb.cpp	/^CCyUSBDevice *openDeviceFunc(short devNumber, char const *funcName)$/;"	f	signature:(short devNumber, char const *funcName)
bitReverse	D4100_usb.cpp	/^static void bitReverse(UCHAR *src, UCHAR *dst, int size)$/;"	f	file:	signature:(UCHAR *src, UCHAR *dst, int size)
vendRequestOut	D4100_usb.cpp	/^static int vendRequestOut(UCHAR request, CCyUSBDevice *dev)$/;"	f	file:	signature:(UCHAR request, CCyUSBDevice *dev)
vendRequestIn	D4100_usb.cpp	/^static int vendRequestIn(UCHAR request, UCHAR buf[2], CCyUSBDevice *dev)$/;"	f	file:	signature:(UCHAR request, UCHAR buf[2], CCyUSBDevice *dev)
registerWrite	D4100_usb.cpp	/^static int registerWrite(unsigned short regAddress, unsigned short data, CCyUSBDevice *dev)$/;"	f	file:	signature:(unsigned short regAddress, unsigned short data, CCyUSBDevice *dev)
registerWrite	D4100_usb.cpp	/^static int registerWrite(unsigned short regAddress, unsigned short data, short devNumber)$/;"	f	file:	signature:(unsigned short regAddress, unsigned short data, short devNumber)
registerRead	D4100_usb.cpp	/^static int registerRead(unsigned short int regAddress, CCyUSBDevice *dev)$/;"	f	file:	signature:(unsigned short int regAddress, CCyUSBDevice *dev)
registerRead	D4100_usb.cpp	/^static int registerRead(unsigned short int regAddress, short devNumber)$/;"	f	file:	signature:(unsigned short int regAddress, short devNumber)
registerWriteBit	D4100_usb.cpp	/^static short registerWriteBit(unsigned short regAddress, unsigned short mask, $/;"	f	file:	signature:(unsigned short regAddress, unsigned short mask, unsigned short value, CCyUSBDevice *dev)
registerWriteBit	D4100_usb.cpp	/^static short registerWriteBit(unsigned short regAddress, unsigned short mask, $/;"	f	file:	signature:(unsigned short regAddress, unsigned short mask, unsigned short value, short devNumber)
registerReadBit	D4100_usb.cpp	/^static short registerReadBit(unsigned short regAddress, unsigned short mask, short devNumber)$/;"	f	file:	signature:(unsigned short regAddress, unsigned short mask, short devNumber)
dataWrite	D4100_usb.cpp	/^static int dataWrite(UCHAR *buffer, long size, CCyUSBDevice *dev, int pipeNum = 0)$/;"	f	file:	signature:(UCHAR *buffer, long size, CCyUSBDevice *dev, int pipeNum = 0)
dataWrite	D4100_usb.cpp	/^static int dataWrite(UCHAR *buffer, long size, UCHAR devNumber, int pipeNum = 0)$/;"	f	file:	signature:(UCHAR *buffer, long size, UCHAR devNumber, int pipeNum = 0)
dataRead	D4100_usb.cpp	/^static int dataRead(UCHAR *buffer, long size, CCyUSBDevice *dev)$/;"	f	file:	signature:(UCHAR *buffer, long size, CCyUSBDevice *dev)
dataRead	D4100_usb.cpp	/^static int dataRead(UCHAR *buffer, long size, UCHAR devNumber)$/;"	f	file:	signature:(UCHAR *buffer, long size, UCHAR devNumber)
loadControl	D4100_usb.cpp	/^short loadControl(CCyUSBDevice *dev)$/;"	f	signature:(CCyUSBDevice *dev)
GetNumDev	D4100_usb.cpp	/^	short int GetNumDev()$/;"	f	signature:()
GetDescriptor	D4100_usb.cpp	/^	int GetDescriptor(int* Array, short int DeviceNumber)$/;"	f	signature:(int* Array, short int DeviceNumber)
GetFirmwareRev	D4100_usb.cpp	/^	unsigned int GetFirmwareRev(short int DeviceNumber)$/;"	f	signature:(short int DeviceNumber)
GetDLLRev	D4100_usb.cpp	/^	long GetDLLRev()$/;"	f	signature:()
GetRESETCOMPLETE	D4100_usb.cpp	/^	short GetRESETCOMPLETE(int waittime, short int DeviceNumber)$/;"	f	signature:(int waittime, short int DeviceNumber)
SetGPIORESETCOMPLETE	D4100_usb.cpp	/^	short SetGPIORESETCOMPLETE(short int DeviceNumber)$/;"	f	signature:(short int DeviceNumber)
GetFPGARev	D4100_usb.cpp	/^	unsigned int GetFPGARev(short int DeviceNumber)$/;"	f	signature:(short int DeviceNumber)
GetDriverRev	D4100_usb.cpp	/^	unsigned int GetDriverRev(short int DeviceNumber)$/;"	f	signature:(short int DeviceNumber)
GetUsbSpeed	D4100_usb.cpp	/^	short int GetUsbSpeed(short int DeviceNumber)$/;"	f	signature:(short int DeviceNumber)
LoadControl	D4100_usb.cpp	/^	short LoadControl(short DeviceNumber)$/;"	f	signature:(short DeviceNumber)
ClearFifos	D4100_usb.cpp	/^	short ClearFifos(short DeviceNumber)$/;"	f	signature:(short DeviceNumber)
SetBlkMd	D4100_usb.cpp	/^	short SetBlkMd(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetBlkMd	D4100_usb.cpp	/^	short GetBlkMd(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetBlkAd	D4100_usb.cpp	/^	short SetBlkAd(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetBlkAd	D4100_usb.cpp	/^	short GetBlkAd(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetRST2BLKZ	D4100_usb.cpp	/^	short SetRST2BLKZ(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetRST2BLKZ	D4100_usb.cpp	/^	short GetRST2BLKZ(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetRowMd	D4100_usb.cpp	/^	short SetRowMd(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetRowMd	D4100_usb.cpp	/^	short GetRowMd(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetRowAddr	D4100_usb.cpp	/^	short SetRowAddr(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetRowAddr	D4100_usb.cpp	/^	short GetRowAddr(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetSTEPVCC	D4100_usb.cpp	/^	short SetSTEPVCC(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetSTEPVCC	D4100_usb.cpp	/^	short GetSTEPVCC(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetCOMPDATA	D4100_usb.cpp	/^	short SetCOMPDATA(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetCOMPDATA	D4100_usb.cpp	/^	short GetCOMPDATA(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetNSFLIP	D4100_usb.cpp	/^	short SetNSFLIP(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetNSFLIP	D4100_usb.cpp	/^	short GetNSFLIP( short DeviceNumber) $/;"	f	signature:( short DeviceNumber)
SetWDT	D4100_usb.cpp	/^	short SetWDT(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetWDT	D4100_usb.cpp	/^	short GetWDT(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetPWRFLOAT	D4100_usb.cpp	/^	short SetPWRFLOAT(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetPWRFLOAT	D4100_usb.cpp	/^	short GetPWRFLOAT(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetEXTRESETENBL	D4100_usb.cpp	/^	short SetEXTRESETENBL(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetEXTRESETENBL	D4100_usb.cpp	/^	short GetEXTRESETENBL(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
SetGPIO	D4100_usb.cpp	/^	short SetGPIO(short value, short DeviceNumber) $/;"	f	signature:(short value, short DeviceNumber)
GetGPIO	D4100_usb.cpp	/^	short GetGPIO(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
GetDMDTYPE	D4100_usb.cpp	/^	short GetDMDTYPE(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
GetDDCVERSION	D4100_usb.cpp	/^	short GetDDCVERSION(short DeviceNumber) $/;"	f	signature:(short DeviceNumber)
LoadData	D4100_usb.cpp	/^	int LoadData(UCHAR* RowData,long length, short DevType, short DeviceNumber) $/;"	f	signature:(UCHAR* RowData,long length, short DevType, short DeviceNumber)
program_FPGA	D4100_usb.cpp	/^	int program_FPGA(UCHAR *write_buffer, LONG write_size, short int DeviceNumber)$/;"	f	signature:(UCHAR *write_buffer, LONG write_size, short int DeviceNumber)
loader.cpp	FirmwareLoader/loader.cpp	1;"	F
ANCHOR_LOAD_INTERNAL	FirmwareLoader/loader.cpp	/^#define ANCHOR_LOAD_INTERNAL /;"	d	file:
ANCHOR_LOAD_EXTERNAL	FirmwareLoader/loader.cpp	/^#define ANCHOR_LOAD_EXTERNAL /;"	d	file:
MAX_INTERNAL_ADDRESS	FirmwareLoader/loader.cpp	/^#define MAX_INTERNAL_ADDRESS /;"	d	file:
INTERNAL_RAM	FirmwareLoader/loader.cpp	/^#define INTERNAL_RAM(/;"	d	file:
CPUCS_REG_EZUSB	FirmwareLoader/loader.cpp	/^#define CPUCS_REG_EZUSB	/;"	d	file:
CPUCS_REG_FX2	FirmwareLoader/loader.cpp	/^#define CPUCS_REG_FX2	/;"	d	file:
EZUSB_8051Reset	FirmwareLoader/loader.cpp	/^static int EZUSB_8051Reset(CCyUSBDevice *dev, UCHAR resetBit);$/;"	p	file:	signature:(CCyUSBDevice *dev, UCHAR resetBit)
EZUSB_DownloadIntelHex	FirmwareLoader/loader.cpp	/^static int EZUSB_DownloadIntelHex(CCyUSBDevice *dev, PINTEL_HEX_RECORD hexRecord);$/;"	p	file:	signature:(CCyUSBDevice *dev, PINTEL_HEX_RECORD hexRecord)
EZUSB_LoadUSBFirmware	FirmwareLoader/loader.cpp	/^int EZUSB_LoadUSBFirmware(CCyUSBDevice *dev)$/;"	f	signature:(CCyUSBDevice *dev)
EZUSB_8051Reset	FirmwareLoader/loader.cpp	/^static int EZUSB_8051Reset(CCyUSBDevice *dev, UCHAR resetBit)$/;"	f	file:	signature:(CCyUSBDevice *dev, UCHAR resetBit)
EZUSB_DownloadIntelHex	FirmwareLoader/loader.cpp	/^static int EZUSB_DownloadIntelHex(CCyUSBDevice *dev, PINTEL_HEX_RECORD hexRecord)$/;"	f	file:	signature:(CCyUSBDevice *dev, PINTEL_HEX_RECORD hexRecord)
firmware1.h	FirmwareLoader/firmware1.h	1;"	F
firmware1	FirmwareLoader/firmware1.h	/^static INTEL_HEX_RECORD firmware1[] = {$/;"	v
firmware2.h	FirmwareLoader/firmware2.h	1;"	F
firmware2	FirmwareLoader/firmware2.h	/^static INTEL_HEX_RECORD firmware2[] = {$/;"	v
loader.h	FirmwareLoader/loader.h	1;"	F
LOADER_H__	FirmwareLoader/loader.h	/^#define LOADER_H__$/;"	d
MAX_INTEL_HEX_RECORD_LENGTH	FirmwareLoader/loader.h	/^#define MAX_INTEL_HEX_RECORD_LENGTH /;"	d
_INTEL_HEX_RECORD	FirmwareLoader/loader.h	/^typedef struct _INTEL_HEX_RECORD$/;"	s
Length	FirmwareLoader/loader.h	/^	BYTE  Length;$/;"	m	struct:_INTEL_HEX_RECORD	access:public
_INTEL_HEX_RECORD::Length	FirmwareLoader/loader.h	/^	BYTE  Length;$/;"	m	struct:_INTEL_HEX_RECORD	access:public
Address	FirmwareLoader/loader.h	/^	WORD  Address;$/;"	m	struct:_INTEL_HEX_RECORD	access:public
_INTEL_HEX_RECORD::Address	FirmwareLoader/loader.h	/^	WORD  Address;$/;"	m	struct:_INTEL_HEX_RECORD	access:public
Type	FirmwareLoader/loader.h	/^	BYTE  Type;$/;"	m	struct:_INTEL_HEX_RECORD	access:public
_INTEL_HEX_RECORD::Type	FirmwareLoader/loader.h	/^	BYTE  Type;$/;"	m	struct:_INTEL_HEX_RECORD	access:public
Data	FirmwareLoader/loader.h	/^	BYTE  Data[MAX_INTEL_HEX_RECORD_LENGTH];$/;"	m	struct:_INTEL_HEX_RECORD	access:public
_INTEL_HEX_RECORD::Data	FirmwareLoader/loader.h	/^	BYTE  Data[MAX_INTEL_HEX_RECORD_LENGTH];$/;"	m	struct:_INTEL_HEX_RECORD	access:public
INTEL_HEX_RECORD	FirmwareLoader/loader.h	/^} INTEL_HEX_RECORD, *PINTEL_HEX_RECORD;$/;"	t	typeref:struct:_INTEL_HEX_RECORD
PINTEL_HEX_RECORD	FirmwareLoader/loader.h	/^} INTEL_HEX_RECORD, *PINTEL_HEX_RECORD;$/;"	t	typeref:struct:_INTEL_HEX_RECORD
EZUSB_LoadUSBFirmware	FirmwareLoader/loader.h	/^int EZUSB_LoadUSBFirmware(CCyUSBDevice *dev);$/;"	p	signature:(CCyUSBDevice *dev)
CyAPI.h	Headers/CyAPI.h	1;"	F
CyUSBH	Headers/CyAPI.h	/^#define CyUSBH$/;"	d
__USB200_H__	Headers/CyAPI.h	/^#define   __USB200_H__$/;"	d
_USB_DEVICE_DESCRIPTOR	Headers/CyAPI.h	/^typedef struct _USB_DEVICE_DESCRIPTOR {$/;"	s
bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bcdUSB	Headers/CyAPI.h	/^    USHORT bcdUSB;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bcdUSB	Headers/CyAPI.h	/^    USHORT bcdUSB;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bDeviceClass	Headers/CyAPI.h	/^    UCHAR bDeviceClass;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bDeviceClass	Headers/CyAPI.h	/^    UCHAR bDeviceClass;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bDeviceSubClass	Headers/CyAPI.h	/^    UCHAR bDeviceSubClass;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bDeviceSubClass	Headers/CyAPI.h	/^    UCHAR bDeviceSubClass;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bDeviceProtocol	Headers/CyAPI.h	/^    UCHAR bDeviceProtocol;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bDeviceProtocol	Headers/CyAPI.h	/^    UCHAR bDeviceProtocol;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bMaxPacketSize0	Headers/CyAPI.h	/^    UCHAR bMaxPacketSize0;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bMaxPacketSize0	Headers/CyAPI.h	/^    UCHAR bMaxPacketSize0;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
idVendor	Headers/CyAPI.h	/^    USHORT idVendor;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::idVendor	Headers/CyAPI.h	/^    USHORT idVendor;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
idProduct	Headers/CyAPI.h	/^    USHORT idProduct;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::idProduct	Headers/CyAPI.h	/^    USHORT idProduct;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bcdDevice	Headers/CyAPI.h	/^    USHORT bcdDevice;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bcdDevice	Headers/CyAPI.h	/^    USHORT bcdDevice;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
iManufacturer	Headers/CyAPI.h	/^    UCHAR iManufacturer;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::iManufacturer	Headers/CyAPI.h	/^    UCHAR iManufacturer;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
iProduct	Headers/CyAPI.h	/^    UCHAR iProduct;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::iProduct	Headers/CyAPI.h	/^    UCHAR iProduct;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
iSerialNumber	Headers/CyAPI.h	/^    UCHAR iSerialNumber;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::iSerialNumber	Headers/CyAPI.h	/^    UCHAR iSerialNumber;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
bNumConfigurations	Headers/CyAPI.h	/^    UCHAR bNumConfigurations;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
_USB_DEVICE_DESCRIPTOR::bNumConfigurations	Headers/CyAPI.h	/^    UCHAR bNumConfigurations;$/;"	m	struct:_USB_DEVICE_DESCRIPTOR	access:public
USB_DEVICE_DESCRIPTOR	Headers/CyAPI.h	/^} USB_DEVICE_DESCRIPTOR, *PUSB_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:_USB_DEVICE_DESCRIPTOR
PUSB_DEVICE_DESCRIPTOR	Headers/CyAPI.h	/^} USB_DEVICE_DESCRIPTOR, *PUSB_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:_USB_DEVICE_DESCRIPTOR
_USB_ENDPOINT_DESCRIPTOR	Headers/CyAPI.h	/^typedef struct _USB_ENDPOINT_DESCRIPTOR {$/;"	s
bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
_USB_ENDPOINT_DESCRIPTOR::bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
_USB_ENDPOINT_DESCRIPTOR::bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
bEndpointAddress	Headers/CyAPI.h	/^    UCHAR bEndpointAddress;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
_USB_ENDPOINT_DESCRIPTOR::bEndpointAddress	Headers/CyAPI.h	/^    UCHAR bEndpointAddress;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
bmAttributes	Headers/CyAPI.h	/^    UCHAR bmAttributes;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
_USB_ENDPOINT_DESCRIPTOR::bmAttributes	Headers/CyAPI.h	/^    UCHAR bmAttributes;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
wMaxPacketSize	Headers/CyAPI.h	/^    USHORT wMaxPacketSize;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
_USB_ENDPOINT_DESCRIPTOR::wMaxPacketSize	Headers/CyAPI.h	/^    USHORT wMaxPacketSize;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
bInterval	Headers/CyAPI.h	/^    UCHAR bInterval;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
_USB_ENDPOINT_DESCRIPTOR::bInterval	Headers/CyAPI.h	/^    UCHAR bInterval;$/;"	m	struct:_USB_ENDPOINT_DESCRIPTOR	access:public
USB_ENDPOINT_DESCRIPTOR	Headers/CyAPI.h	/^} USB_ENDPOINT_DESCRIPTOR, *PUSB_ENDPOINT_DESCRIPTOR;$/;"	t	typeref:struct:_USB_ENDPOINT_DESCRIPTOR
PUSB_ENDPOINT_DESCRIPTOR	Headers/CyAPI.h	/^} USB_ENDPOINT_DESCRIPTOR, *PUSB_ENDPOINT_DESCRIPTOR;$/;"	t	typeref:struct:_USB_ENDPOINT_DESCRIPTOR
_USB_CONFIGURATION_DESCRIPTOR	Headers/CyAPI.h	/^typedef struct _USB_CONFIGURATION_DESCRIPTOR {$/;"	s
bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
wTotalLength	Headers/CyAPI.h	/^    USHORT wTotalLength;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::wTotalLength	Headers/CyAPI.h	/^    USHORT wTotalLength;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
bNumInterfaces	Headers/CyAPI.h	/^    UCHAR bNumInterfaces;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::bNumInterfaces	Headers/CyAPI.h	/^    UCHAR bNumInterfaces;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
bConfigurationValue	Headers/CyAPI.h	/^    UCHAR bConfigurationValue;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::bConfigurationValue	Headers/CyAPI.h	/^    UCHAR bConfigurationValue;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
iConfiguration	Headers/CyAPI.h	/^    UCHAR iConfiguration;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::iConfiguration	Headers/CyAPI.h	/^    UCHAR iConfiguration;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
bmAttributes	Headers/CyAPI.h	/^    UCHAR bmAttributes;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::bmAttributes	Headers/CyAPI.h	/^    UCHAR bmAttributes;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
MaxPower	Headers/CyAPI.h	/^    UCHAR MaxPower;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
_USB_CONFIGURATION_DESCRIPTOR::MaxPower	Headers/CyAPI.h	/^    UCHAR MaxPower;$/;"	m	struct:_USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR	Headers/CyAPI.h	/^} USB_CONFIGURATION_DESCRIPTOR, *PUSB_CONFIGURATION_DESCRIPTOR;$/;"	t	typeref:struct:_USB_CONFIGURATION_DESCRIPTOR
PUSB_CONFIGURATION_DESCRIPTOR	Headers/CyAPI.h	/^} USB_CONFIGURATION_DESCRIPTOR, *PUSB_CONFIGURATION_DESCRIPTOR;$/;"	t	typeref:struct:_USB_CONFIGURATION_DESCRIPTOR
_USB_INTERFACE_DESCRIPTOR	Headers/CyAPI.h	/^typedef struct _USB_INTERFACE_DESCRIPTOR {$/;"	s
bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
bInterfaceNumber	Headers/CyAPI.h	/^    UCHAR bInterfaceNumber;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bInterfaceNumber	Headers/CyAPI.h	/^    UCHAR bInterfaceNumber;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
bAlternateSetting	Headers/CyAPI.h	/^    UCHAR bAlternateSetting;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bAlternateSetting	Headers/CyAPI.h	/^    UCHAR bAlternateSetting;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
bNumEndpoints	Headers/CyAPI.h	/^    UCHAR bNumEndpoints;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bNumEndpoints	Headers/CyAPI.h	/^    UCHAR bNumEndpoints;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
bInterfaceClass	Headers/CyAPI.h	/^    UCHAR bInterfaceClass;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bInterfaceClass	Headers/CyAPI.h	/^    UCHAR bInterfaceClass;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
bInterfaceSubClass	Headers/CyAPI.h	/^    UCHAR bInterfaceSubClass;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bInterfaceSubClass	Headers/CyAPI.h	/^    UCHAR bInterfaceSubClass;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
bInterfaceProtocol	Headers/CyAPI.h	/^    UCHAR bInterfaceProtocol;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::bInterfaceProtocol	Headers/CyAPI.h	/^    UCHAR bInterfaceProtocol;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
iInterface	Headers/CyAPI.h	/^    UCHAR iInterface;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
_USB_INTERFACE_DESCRIPTOR::iInterface	Headers/CyAPI.h	/^    UCHAR iInterface;$/;"	m	struct:_USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR	Headers/CyAPI.h	/^} USB_INTERFACE_DESCRIPTOR, *PUSB_INTERFACE_DESCRIPTOR;$/;"	t	typeref:struct:_USB_INTERFACE_DESCRIPTOR
PUSB_INTERFACE_DESCRIPTOR	Headers/CyAPI.h	/^} USB_INTERFACE_DESCRIPTOR, *PUSB_INTERFACE_DESCRIPTOR;$/;"	t	typeref:struct:_USB_INTERFACE_DESCRIPTOR
_USB_STRING_DESCRIPTOR	Headers/CyAPI.h	/^typedef struct _USB_STRING_DESCRIPTOR {$/;"	s
bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_STRING_DESCRIPTOR	access:public
_USB_STRING_DESCRIPTOR::bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_STRING_DESCRIPTOR	access:public
bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_STRING_DESCRIPTOR	access:public
_USB_STRING_DESCRIPTOR::bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_STRING_DESCRIPTOR	access:public
bString	Headers/CyAPI.h	/^    WCHAR bString[1];$/;"	m	struct:_USB_STRING_DESCRIPTOR	access:public
_USB_STRING_DESCRIPTOR::bString	Headers/CyAPI.h	/^    WCHAR bString[1];$/;"	m	struct:_USB_STRING_DESCRIPTOR	access:public
USB_STRING_DESCRIPTOR	Headers/CyAPI.h	/^} USB_STRING_DESCRIPTOR, *PUSB_STRING_DESCRIPTOR;$/;"	t	typeref:struct:_USB_STRING_DESCRIPTOR
PUSB_STRING_DESCRIPTOR	Headers/CyAPI.h	/^} USB_STRING_DESCRIPTOR, *PUSB_STRING_DESCRIPTOR;$/;"	t	typeref:struct:_USB_STRING_DESCRIPTOR
_USB_COMMON_DESCRIPTOR	Headers/CyAPI.h	/^typedef struct _USB_COMMON_DESCRIPTOR {$/;"	s
bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_COMMON_DESCRIPTOR	access:public
_USB_COMMON_DESCRIPTOR::bLength	Headers/CyAPI.h	/^    UCHAR bLength;$/;"	m	struct:_USB_COMMON_DESCRIPTOR	access:public
bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_COMMON_DESCRIPTOR	access:public
_USB_COMMON_DESCRIPTOR::bDescriptorType	Headers/CyAPI.h	/^    UCHAR bDescriptorType;$/;"	m	struct:_USB_COMMON_DESCRIPTOR	access:public
USB_COMMON_DESCRIPTOR	Headers/CyAPI.h	/^} USB_COMMON_DESCRIPTOR, *PUSB_COMMON_DESCRIPTOR;$/;"	t	typeref:struct:_USB_COMMON_DESCRIPTOR
PUSB_COMMON_DESCRIPTOR	Headers/CyAPI.h	/^} USB_COMMON_DESCRIPTOR, *PUSB_COMMON_DESCRIPTOR;$/;"	t	typeref:struct:_USB_COMMON_DESCRIPTOR
CCyIsoPktInfo	Headers/CyAPI.h	/^class CCyIsoPktInfo {$/;"	c
Status	Headers/CyAPI.h	/^	LONG Status;$/;"	m	class:CCyIsoPktInfo	access:public
CCyIsoPktInfo::Status	Headers/CyAPI.h	/^	LONG Status;$/;"	m	class:CCyIsoPktInfo	access:public
Length	Headers/CyAPI.h	/^	LONG Length;$/;"	m	class:CCyIsoPktInfo	access:public
CCyIsoPktInfo::Length	Headers/CyAPI.h	/^	LONG Length;$/;"	m	class:CCyIsoPktInfo	access:public
CYUSBDRV_GUID	Headers/CyAPI.h	/^static GUID CYUSBDRV_GUID = {0xae18aa60, 0x7f6a, 0x11d4, 0x97, 0xdd, 0x0, 0x1, 0x2, 0x29, 0xb9, 0x59};$/;"	v
TGT_DEVICE	Headers/CyAPI.h	/^typedef enum {TGT_DEVICE, TGT_INTFC, TGT_ENDPT, TGT_OTHER } CTL_XFER_TGT_TYPE;$/;"	e	enum:__anon1
TGT_INTFC	Headers/CyAPI.h	/^typedef enum {TGT_DEVICE, TGT_INTFC, TGT_ENDPT, TGT_OTHER } CTL_XFER_TGT_TYPE;$/;"	e	enum:__anon1
TGT_ENDPT	Headers/CyAPI.h	/^typedef enum {TGT_DEVICE, TGT_INTFC, TGT_ENDPT, TGT_OTHER } CTL_XFER_TGT_TYPE;$/;"	e	enum:__anon1
TGT_OTHER	Headers/CyAPI.h	/^typedef enum {TGT_DEVICE, TGT_INTFC, TGT_ENDPT, TGT_OTHER } CTL_XFER_TGT_TYPE;$/;"	e	enum:__anon1
CTL_XFER_TGT_TYPE	Headers/CyAPI.h	/^typedef enum {TGT_DEVICE, TGT_INTFC, TGT_ENDPT, TGT_OTHER } CTL_XFER_TGT_TYPE;$/;"	t	typeref:enum:__anon1
REQ_STD	Headers/CyAPI.h	/^typedef enum {REQ_STD, REQ_CLASS, REQ_VENDOR } CTL_XFER_REQ_TYPE;$/;"	e	enum:__anon2
REQ_CLASS	Headers/CyAPI.h	/^typedef enum {REQ_STD, REQ_CLASS, REQ_VENDOR } CTL_XFER_REQ_TYPE;$/;"	e	enum:__anon2
REQ_VENDOR	Headers/CyAPI.h	/^typedef enum {REQ_STD, REQ_CLASS, REQ_VENDOR } CTL_XFER_REQ_TYPE;$/;"	e	enum:__anon2
CTL_XFER_REQ_TYPE	Headers/CyAPI.h	/^typedef enum {REQ_STD, REQ_CLASS, REQ_VENDOR } CTL_XFER_REQ_TYPE;$/;"	t	typeref:enum:__anon2
DIR_TO_DEVICE	Headers/CyAPI.h	/^typedef enum {DIR_TO_DEVICE, DIR_FROM_DEVICE } CTL_XFER_DIR_TYPE;$/;"	e	enum:__anon3
DIR_FROM_DEVICE	Headers/CyAPI.h	/^typedef enum {DIR_TO_DEVICE, DIR_FROM_DEVICE } CTL_XFER_DIR_TYPE;$/;"	e	enum:__anon3
CTL_XFER_DIR_TYPE	Headers/CyAPI.h	/^typedef enum {DIR_TO_DEVICE, DIR_FROM_DEVICE } CTL_XFER_DIR_TYPE;$/;"	t	typeref:enum:__anon3
XMODE_BUFFERED	Headers/CyAPI.h	/^typedef enum {XMODE_BUFFERED, XMODE_DIRECT } XFER_MODE_TYPE;$/;"	e	enum:__anon4
XMODE_DIRECT	Headers/CyAPI.h	/^typedef enum {XMODE_BUFFERED, XMODE_DIRECT } XFER_MODE_TYPE;$/;"	e	enum:__anon4
XFER_MODE_TYPE	Headers/CyAPI.h	/^typedef enum {XMODE_BUFFERED, XMODE_DIRECT } XFER_MODE_TYPE;$/;"	t	typeref:enum:__anon4
MAX_ENDPTS	Headers/CyAPI.h	/^const int MAX_ENDPTS = 16;$/;"	v
MAX_INTERFACES	Headers/CyAPI.h	/^const int MAX_INTERFACES = 8;$/;"	v
USB_STRING_MAXLEN	Headers/CyAPI.h	/^const int USB_STRING_MAXLEN = 256;$/;"	v
CCyUSBEndPoint	Headers/CyAPI.h	/^class CCyUSBEndPoint$/;"	c
WaitForIO	Headers/CyAPI.h	/^  bool WaitForIO(OVERLAPPED *ovLapStatus);$/;"	p	class:CCyUSBEndPoint	access:protected	signature:(OVERLAPPED *ovLapStatus)
CCyUSBEndPoint::WaitForIO	Headers/CyAPI.h	/^  bool WaitForIO(OVERLAPPED *ovLapStatus);$/;"	p	class:CCyUSBEndPoint	access:protected	signature:(OVERLAPPED *ovLapStatus)
BeginDirectXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginDirectXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyUSBEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
CCyUSBEndPoint::BeginDirectXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginDirectXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyUSBEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
BeginBufferedXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginBufferedXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyUSBEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
CCyUSBEndPoint::BeginBufferedXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginBufferedXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyUSBEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
CCyUSBEndPoint	Headers/CyAPI.h	/^  CCyUSBEndPoint(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
CCyUSBEndPoint::CCyUSBEndPoint	Headers/CyAPI.h	/^  CCyUSBEndPoint(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
CCyUSBEndPoint	Headers/CyAPI.h	/^  CCyUSBEndPoint(CCyUSBEndPoint& ept);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(CCyUSBEndPoint& ept)
CCyUSBEndPoint::CCyUSBEndPoint	Headers/CyAPI.h	/^  CCyUSBEndPoint(CCyUSBEndPoint& ept);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(CCyUSBEndPoint& ept)
CCyUSBEndPoint	Headers/CyAPI.h	/^  CCyUSBEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
CCyUSBEndPoint::CCyUSBEndPoint	Headers/CyAPI.h	/^  CCyUSBEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
hDevice	Headers/CyAPI.h	/^  HANDLE        hDevice;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::hDevice	Headers/CyAPI.h	/^  HANDLE        hDevice;$/;"	m	class:CCyUSBEndPoint	access:public
DscLen	Headers/CyAPI.h	/^  UCHAR  DscLen;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::DscLen	Headers/CyAPI.h	/^  UCHAR  DscLen;$/;"	m	class:CCyUSBEndPoint	access:public
DscType	Headers/CyAPI.h	/^  UCHAR  DscType;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::DscType	Headers/CyAPI.h	/^  UCHAR  DscType;$/;"	m	class:CCyUSBEndPoint	access:public
Address	Headers/CyAPI.h	/^  UCHAR  Address;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::Address	Headers/CyAPI.h	/^  UCHAR  Address;$/;"	m	class:CCyUSBEndPoint	access:public
Attributes	Headers/CyAPI.h	/^  UCHAR  Attributes;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::Attributes	Headers/CyAPI.h	/^  UCHAR  Attributes;$/;"	m	class:CCyUSBEndPoint	access:public
MaxPktSize	Headers/CyAPI.h	/^  USHORT MaxPktSize;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::MaxPktSize	Headers/CyAPI.h	/^  USHORT MaxPktSize;$/;"	m	class:CCyUSBEndPoint	access:public
PktsPerFrame	Headers/CyAPI.h	/^  USHORT PktsPerFrame;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::PktsPerFrame	Headers/CyAPI.h	/^  USHORT PktsPerFrame;$/;"	m	class:CCyUSBEndPoint	access:public
Interval	Headers/CyAPI.h	/^  UCHAR  Interval;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::Interval	Headers/CyAPI.h	/^  UCHAR  Interval;$/;"	m	class:CCyUSBEndPoint	access:public
TimeOut	Headers/CyAPI.h	/^  ULONG  TimeOut;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::TimeOut	Headers/CyAPI.h	/^  ULONG  TimeOut;$/;"	m	class:CCyUSBEndPoint	access:public
UsbdStatus	Headers/CyAPI.h	/^  ULONG  UsbdStatus;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::UsbdStatus	Headers/CyAPI.h	/^  ULONG  UsbdStatus;$/;"	m	class:CCyUSBEndPoint	access:public
NtStatus	Headers/CyAPI.h	/^  ULONG  NtStatus;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::NtStatus	Headers/CyAPI.h	/^  ULONG  NtStatus;$/;"	m	class:CCyUSBEndPoint	access:public
bytesWritten	Headers/CyAPI.h	/^  DWORD  bytesWritten;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::bytesWritten	Headers/CyAPI.h	/^  DWORD  bytesWritten;$/;"	m	class:CCyUSBEndPoint	access:public
LastError	Headers/CyAPI.h	/^  DWORD  LastError;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::LastError	Headers/CyAPI.h	/^  DWORD  LastError;$/;"	m	class:CCyUSBEndPoint	access:public
bIn	Headers/CyAPI.h	/^  bool   bIn;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::bIn	Headers/CyAPI.h	/^  bool   bIn;$/;"	m	class:CCyUSBEndPoint	access:public
XferMode	Headers/CyAPI.h	/^  XFER_MODE_TYPE   XferMode;$/;"	m	class:CCyUSBEndPoint	access:public
CCyUSBEndPoint::XferMode	Headers/CyAPI.h	/^  XFER_MODE_TYPE   XferMode;$/;"	m	class:CCyUSBEndPoint	access:public
XferData	Headers/CyAPI.h	/^  bool    XferData(PUCHAR buf, LONG &len, CCyIsoPktInfo* pktInfos = NULL);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG &len, CCyIsoPktInfo* pktInfos = NULL)
CCyUSBEndPoint::XferData	Headers/CyAPI.h	/^  bool    XferData(PUCHAR buf, LONG &len, CCyIsoPktInfo* pktInfos = NULL);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG &len, CCyIsoPktInfo* pktInfos = NULL)
XferData	Headers/CyAPI.h	/^  bool	  XferData(PUCHAR buf, LONG &bufLen, CCyIsoPktInfo* pktInfos, bool pktMode);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG &bufLen, CCyIsoPktInfo* pktInfos, bool pktMode)
CCyUSBEndPoint::XferData	Headers/CyAPI.h	/^  bool	  XferData(PUCHAR buf, LONG &bufLen, CCyIsoPktInfo* pktInfos, bool pktMode);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG &bufLen, CCyIsoPktInfo* pktInfos, bool pktMode)
BeginDataXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov) = 0;$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyUSBEndPoint::BeginDataXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov) = 0;$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
FinishDataXfer	Headers/CyAPI.h	/^  virtual bool FinishDataXfer(PUCHAR buf, LONG &len, OVERLAPPED *ov, PUCHAR pXmitBuf, CCyIsoPktInfo* pktInfos = NULL);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG &len, OVERLAPPED *ov, PUCHAR pXmitBuf, CCyIsoPktInfo* pktInfos = NULL)
CCyUSBEndPoint::FinishDataXfer	Headers/CyAPI.h	/^  virtual bool FinishDataXfer(PUCHAR buf, LONG &len, OVERLAPPED *ov, PUCHAR pXmitBuf, CCyIsoPktInfo* pktInfos = NULL);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(PUCHAR buf, LONG &len, OVERLAPPED *ov, PUCHAR pXmitBuf, CCyIsoPktInfo* pktInfos = NULL)
WaitForXfer	Headers/CyAPI.h	/^  bool    WaitForXfer(OVERLAPPED *ov, ULONG tOut);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(OVERLAPPED *ov, ULONG tOut)
CCyUSBEndPoint::WaitForXfer	Headers/CyAPI.h	/^  bool    WaitForXfer(OVERLAPPED *ov, ULONG tOut);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(OVERLAPPED *ov, ULONG tOut)
GetXferSize	Headers/CyAPI.h	/^  ULONG   GetXferSize(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
CCyUSBEndPoint::GetXferSize	Headers/CyAPI.h	/^  ULONG   GetXferSize(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
SetXferSize	Headers/CyAPI.h	/^  void    SetXferSize(ULONG xfer);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(ULONG xfer)
CCyUSBEndPoint::SetXferSize	Headers/CyAPI.h	/^  void    SetXferSize(ULONG xfer);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(ULONG xfer)
Reset	Headers/CyAPI.h	/^  bool Reset(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
CCyUSBEndPoint::Reset	Headers/CyAPI.h	/^  bool Reset(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
Abort	Headers/CyAPI.h	/^  bool Abort(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
CCyUSBEndPoint::Abort	Headers/CyAPI.h	/^  bool Abort(void);$/;"	p	class:CCyUSBEndPoint	access:public	signature:(void)
CCyControlEndPoint	Headers/CyAPI.h	/^class CCyControlEndPoint : public CCyUSBEndPoint$/;"	c	inherits:CCyUSBEndPoint
CCyControlEndPoint	Headers/CyAPI.h	/^  CCyControlEndPoint(void);$/;"	p	class:CCyControlEndPoint	access:public	signature:(void)
CCyControlEndPoint::CCyControlEndPoint	Headers/CyAPI.h	/^  CCyControlEndPoint(void);$/;"	p	class:CCyControlEndPoint	access:public	signature:(void)
CCyControlEndPoint	Headers/CyAPI.h	/^  CCyControlEndPoint(CCyControlEndPoint& ept);$/;"	p	class:CCyControlEndPoint	access:public	signature:(CCyControlEndPoint& ept)
CCyControlEndPoint::CCyControlEndPoint	Headers/CyAPI.h	/^  CCyControlEndPoint(CCyControlEndPoint& ept);$/;"	p	class:CCyControlEndPoint	access:public	signature:(CCyControlEndPoint& ept)
CCyControlEndPoint	Headers/CyAPI.h	/^  CCyControlEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyControlEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
CCyControlEndPoint::CCyControlEndPoint	Headers/CyAPI.h	/^  CCyControlEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyControlEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
Target	Headers/CyAPI.h	/^  CTL_XFER_TGT_TYPE Target;$/;"	m	class:CCyControlEndPoint	access:public
CCyControlEndPoint::Target	Headers/CyAPI.h	/^  CTL_XFER_TGT_TYPE Target;$/;"	m	class:CCyControlEndPoint	access:public
ReqType	Headers/CyAPI.h	/^  CTL_XFER_REQ_TYPE ReqType;$/;"	m	class:CCyControlEndPoint	access:public
CCyControlEndPoint::ReqType	Headers/CyAPI.h	/^  CTL_XFER_REQ_TYPE ReqType;$/;"	m	class:CCyControlEndPoint	access:public
Direction	Headers/CyAPI.h	/^  CTL_XFER_DIR_TYPE Direction;$/;"	m	class:CCyControlEndPoint	access:public
CCyControlEndPoint::Direction	Headers/CyAPI.h	/^  CTL_XFER_DIR_TYPE Direction;$/;"	m	class:CCyControlEndPoint	access:public
ReqCode	Headers/CyAPI.h	/^  UCHAR             ReqCode;$/;"	m	class:CCyControlEndPoint	access:public
CCyControlEndPoint::ReqCode	Headers/CyAPI.h	/^  UCHAR             ReqCode;$/;"	m	class:CCyControlEndPoint	access:public
Value	Headers/CyAPI.h	/^  WORD              Value;$/;"	m	class:CCyControlEndPoint	access:public
CCyControlEndPoint::Value	Headers/CyAPI.h	/^  WORD              Value;$/;"	m	class:CCyControlEndPoint	access:public
Index	Headers/CyAPI.h	/^  WORD              Index;$/;"	m	class:CCyControlEndPoint	access:public
CCyControlEndPoint::Index	Headers/CyAPI.h	/^  WORD              Index;$/;"	m	class:CCyControlEndPoint	access:public
Read	Headers/CyAPI.h	/^  bool Read(PUCHAR buf, LONG &len);$/;"	p	class:CCyControlEndPoint	access:public	signature:(PUCHAR buf, LONG &len)
CCyControlEndPoint::Read	Headers/CyAPI.h	/^  bool Read(PUCHAR buf, LONG &len);$/;"	p	class:CCyControlEndPoint	access:public	signature:(PUCHAR buf, LONG &len)
Write	Headers/CyAPI.h	/^  bool Write(PUCHAR buf, LONG &len);$/;"	p	class:CCyControlEndPoint	access:public	signature:(PUCHAR buf, LONG &len)
CCyControlEndPoint::Write	Headers/CyAPI.h	/^  bool Write(PUCHAR buf, LONG &len);$/;"	p	class:CCyControlEndPoint	access:public	signature:(PUCHAR buf, LONG &len)
BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyControlEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyControlEndPoint::BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyControlEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyIsocEndPoint	Headers/CyAPI.h	/^class CCyIsocEndPoint : public CCyUSBEndPoint$/;"	c	inherits:CCyUSBEndPoint
BeginDirectXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginDirectXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyIsocEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
CCyIsocEndPoint::BeginDirectXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginDirectXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyIsocEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
BeginBufferedXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginBufferedXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyIsocEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
CCyIsocEndPoint::BeginBufferedXfer	Headers/CyAPI.h	/^  virtual PUCHAR BeginBufferedXfer(PUCHAR buf, LONG bufLen, OVERLAPPED *ov);$/;"	p	class:CCyIsocEndPoint	access:protected	signature:(PUCHAR buf, LONG bufLen, OVERLAPPED *ov)
CCyIsocEndPoint	Headers/CyAPI.h	/^  CCyIsocEndPoint(void);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(void)
CCyIsocEndPoint::CCyIsocEndPoint	Headers/CyAPI.h	/^  CCyIsocEndPoint(void);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(void)
CCyIsocEndPoint	Headers/CyAPI.h	/^  CCyIsocEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
CCyIsocEndPoint::CCyIsocEndPoint	Headers/CyAPI.h	/^  CCyIsocEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyIsocEndPoint::BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CreatePktInfos	Headers/CyAPI.h	/^  CCyIsoPktInfo* CreatePktInfos(LONG bufLen, int &packets);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(LONG bufLen, int &packets)
CCyIsocEndPoint::CreatePktInfos	Headers/CyAPI.h	/^  CCyIsoPktInfo* CreatePktInfos(LONG bufLen, int &packets);$/;"	p	class:CCyIsocEndPoint	access:public	signature:(LONG bufLen, int &packets)
CCyBulkEndPoint	Headers/CyAPI.h	/^class CCyBulkEndPoint : public CCyUSBEndPoint$/;"	c	inherits:CCyUSBEndPoint
CCyBulkEndPoint	Headers/CyAPI.h	/^  CCyBulkEndPoint(void);$/;"	p	class:CCyBulkEndPoint	access:public	signature:(void)
CCyBulkEndPoint::CCyBulkEndPoint	Headers/CyAPI.h	/^  CCyBulkEndPoint(void);$/;"	p	class:CCyBulkEndPoint	access:public	signature:(void)
CCyBulkEndPoint	Headers/CyAPI.h	/^  CCyBulkEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyBulkEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
CCyBulkEndPoint::CCyBulkEndPoint	Headers/CyAPI.h	/^  CCyBulkEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyBulkEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyBulkEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyBulkEndPoint::BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyBulkEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyInterruptEndPoint	Headers/CyAPI.h	/^class CCyInterruptEndPoint : public CCyUSBEndPoint$/;"	c	inherits:CCyUSBEndPoint
CCyInterruptEndPoint	Headers/CyAPI.h	/^  CCyInterruptEndPoint(void);$/;"	p	class:CCyInterruptEndPoint	access:public	signature:(void)
CCyInterruptEndPoint::CCyInterruptEndPoint	Headers/CyAPI.h	/^  CCyInterruptEndPoint(void);$/;"	p	class:CCyInterruptEndPoint	access:public	signature:(void)
CCyInterruptEndPoint	Headers/CyAPI.h	/^  CCyInterruptEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyInterruptEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
CCyInterruptEndPoint::CCyInterruptEndPoint	Headers/CyAPI.h	/^  CCyInterruptEndPoint(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor);$/;"	p	class:CCyInterruptEndPoint	access:public	signature:(HANDLE h, PUSB_ENDPOINT_DESCRIPTOR pEndPtDescriptor)
BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyInterruptEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyInterruptEndPoint::BeginDataXfer	Headers/CyAPI.h	/^  PUCHAR BeginDataXfer(PUCHAR buf, LONG len, OVERLAPPED *ov);$/;"	p	class:CCyInterruptEndPoint	access:public	signature:(PUCHAR buf, LONG len, OVERLAPPED *ov)
CCyUSBInterface	Headers/CyAPI.h	/^class CCyUSBInterface$/;"	c
EndPoints	Headers/CyAPI.h	/^  CCyUSBEndPoint *EndPoints[MAX_ENDPTS];  \/\/ Holds pointers to all the interface's endpoints, plus a pointer to the Control endpoint zero$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::EndPoints	Headers/CyAPI.h	/^  CCyUSBEndPoint *EndPoints[MAX_ENDPTS];  \/\/ Holds pointers to all the interface's endpoints, plus a pointer to the Control endpoint zero$/;"	m	class:CCyUSBInterface	access:public
bLength	Headers/CyAPI.h	/^  UCHAR bLength;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bLength	Headers/CyAPI.h	/^  UCHAR bLength;$/;"	m	class:CCyUSBInterface	access:public
bDescriptorType	Headers/CyAPI.h	/^  UCHAR bDescriptorType;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bDescriptorType	Headers/CyAPI.h	/^  UCHAR bDescriptorType;$/;"	m	class:CCyUSBInterface	access:public
bInterfaceNumber	Headers/CyAPI.h	/^  UCHAR bInterfaceNumber;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bInterfaceNumber	Headers/CyAPI.h	/^  UCHAR bInterfaceNumber;$/;"	m	class:CCyUSBInterface	access:public
bAlternateSetting	Headers/CyAPI.h	/^  UCHAR bAlternateSetting;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bAlternateSetting	Headers/CyAPI.h	/^  UCHAR bAlternateSetting;$/;"	m	class:CCyUSBInterface	access:public
bNumEndpoints	Headers/CyAPI.h	/^  UCHAR bNumEndpoints;           \/\/ Not counting the control endpoint$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bNumEndpoints	Headers/CyAPI.h	/^  UCHAR bNumEndpoints;           \/\/ Not counting the control endpoint$/;"	m	class:CCyUSBInterface	access:public
bInterfaceClass	Headers/CyAPI.h	/^  UCHAR bInterfaceClass;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bInterfaceClass	Headers/CyAPI.h	/^  UCHAR bInterfaceClass;$/;"	m	class:CCyUSBInterface	access:public
bInterfaceSubClass	Headers/CyAPI.h	/^  UCHAR bInterfaceSubClass;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bInterfaceSubClass	Headers/CyAPI.h	/^  UCHAR bInterfaceSubClass;$/;"	m	class:CCyUSBInterface	access:public
bInterfaceProtocol	Headers/CyAPI.h	/^  UCHAR bInterfaceProtocol;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bInterfaceProtocol	Headers/CyAPI.h	/^  UCHAR bInterfaceProtocol;$/;"	m	class:CCyUSBInterface	access:public
iInterface	Headers/CyAPI.h	/^  UCHAR iInterface;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::iInterface	Headers/CyAPI.h	/^  UCHAR iInterface;$/;"	m	class:CCyUSBInterface	access:public
bAltSettings	Headers/CyAPI.h	/^  UCHAR bAltSettings;$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::bAltSettings	Headers/CyAPI.h	/^  UCHAR bAltSettings;$/;"	m	class:CCyUSBInterface	access:public
wTotalLength	Headers/CyAPI.h	/^  USHORT wTotalLength;          \/\/ Needed in case Intfc has additional (non-endpt) descriptors$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface::wTotalLength	Headers/CyAPI.h	/^  USHORT wTotalLength;          \/\/ Needed in case Intfc has additional (non-endpt) descriptors$/;"	m	class:CCyUSBInterface	access:public
CCyUSBInterface	Headers/CyAPI.h	/^  CCyUSBInterface(HANDLE h, PUSB_INTERFACE_DESCRIPTOR pIntfcDescriptor);$/;"	p	class:CCyUSBInterface	access:public	signature:(HANDLE h, PUSB_INTERFACE_DESCRIPTOR pIntfcDescriptor)
CCyUSBInterface::CCyUSBInterface	Headers/CyAPI.h	/^  CCyUSBInterface(HANDLE h, PUSB_INTERFACE_DESCRIPTOR pIntfcDescriptor);$/;"	p	class:CCyUSBInterface	access:public	signature:(HANDLE h, PUSB_INTERFACE_DESCRIPTOR pIntfcDescriptor)
CCyUSBInterface	Headers/CyAPI.h	/^  CCyUSBInterface(CCyUSBInterface& ifc);  \/\/ Copy Constructor$/;"	p	class:CCyUSBInterface	access:public	signature:(CCyUSBInterface& ifc)
CCyUSBInterface::CCyUSBInterface	Headers/CyAPI.h	/^  CCyUSBInterface(CCyUSBInterface& ifc);  \/\/ Copy Constructor$/;"	p	class:CCyUSBInterface	access:public	signature:(CCyUSBInterface& ifc)
~CCyUSBInterface	Headers/CyAPI.h	/^  ~CCyUSBInterface(void);$/;"	p	class:CCyUSBInterface	access:public	signature:(void)
CCyUSBInterface::~CCyUSBInterface	Headers/CyAPI.h	/^  ~CCyUSBInterface(void);$/;"	p	class:CCyUSBInterface	access:public	signature:(void)
CCyUSBConfig	Headers/CyAPI.h	/^class CCyUSBConfig$/;"	c
Interfaces	Headers/CyAPI.h	/^  CCyUSBInterface *Interfaces[MAX_INTERFACES];$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::Interfaces	Headers/CyAPI.h	/^  CCyUSBInterface *Interfaces[MAX_INTERFACES];$/;"	m	class:CCyUSBConfig	access:public
bLength	Headers/CyAPI.h	/^  UCHAR bLength;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::bLength	Headers/CyAPI.h	/^  UCHAR bLength;$/;"	m	class:CCyUSBConfig	access:public
bDescriptorType	Headers/CyAPI.h	/^  UCHAR bDescriptorType;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::bDescriptorType	Headers/CyAPI.h	/^  UCHAR bDescriptorType;$/;"	m	class:CCyUSBConfig	access:public
wTotalLength	Headers/CyAPI.h	/^  USHORT wTotalLength;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::wTotalLength	Headers/CyAPI.h	/^  USHORT wTotalLength;$/;"	m	class:CCyUSBConfig	access:public
bNumInterfaces	Headers/CyAPI.h	/^  UCHAR bNumInterfaces;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::bNumInterfaces	Headers/CyAPI.h	/^  UCHAR bNumInterfaces;$/;"	m	class:CCyUSBConfig	access:public
bConfigurationValue	Headers/CyAPI.h	/^  UCHAR bConfigurationValue;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::bConfigurationValue	Headers/CyAPI.h	/^  UCHAR bConfigurationValue;$/;"	m	class:CCyUSBConfig	access:public
iConfiguration	Headers/CyAPI.h	/^  UCHAR iConfiguration;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::iConfiguration	Headers/CyAPI.h	/^  UCHAR iConfiguration;$/;"	m	class:CCyUSBConfig	access:public
bmAttributes	Headers/CyAPI.h	/^  UCHAR bmAttributes;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::bmAttributes	Headers/CyAPI.h	/^  UCHAR bmAttributes;$/;"	m	class:CCyUSBConfig	access:public
MaxPower	Headers/CyAPI.h	/^  UCHAR MaxPower;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::MaxPower	Headers/CyAPI.h	/^  UCHAR MaxPower;$/;"	m	class:CCyUSBConfig	access:public
AltInterfaces	Headers/CyAPI.h	/^  UCHAR AltInterfaces;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig::AltInterfaces	Headers/CyAPI.h	/^  UCHAR AltInterfaces;$/;"	m	class:CCyUSBConfig	access:public
CCyUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig(void);$/;"	p	class:CCyUSBConfig	access:public	signature:(void)
CCyUSBConfig::CCyUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig(void);$/;"	p	class:CCyUSBConfig	access:public	signature:(void)
CCyUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig(CCyUSBConfig& cfg);  \/\/ Copy Constructor$/;"	p	class:CCyUSBConfig	access:public	signature:(CCyUSBConfig& cfg)
CCyUSBConfig::CCyUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig(CCyUSBConfig& cfg);  \/\/ Copy Constructor$/;"	p	class:CCyUSBConfig	access:public	signature:(CCyUSBConfig& cfg)
CCyUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig(HANDLE h, PUSB_CONFIGURATION_DESCRIPTOR pConfigDescr);$/;"	p	class:CCyUSBConfig	access:public	signature:(HANDLE h, PUSB_CONFIGURATION_DESCRIPTOR pConfigDescr)
CCyUSBConfig::CCyUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig(HANDLE h, PUSB_CONFIGURATION_DESCRIPTOR pConfigDescr);$/;"	p	class:CCyUSBConfig	access:public	signature:(HANDLE h, PUSB_CONFIGURATION_DESCRIPTOR pConfigDescr)
~CCyUSBConfig	Headers/CyAPI.h	/^  ~CCyUSBConfig(void);$/;"	p	class:CCyUSBConfig	access:public	signature:(void)
CCyUSBConfig::~CCyUSBConfig	Headers/CyAPI.h	/^  ~CCyUSBConfig(void);$/;"	p	class:CCyUSBConfig	access:public	signature:(void)
CCyUSBDevice	Headers/CyAPI.h	/^class CCyUSBDevice$/;"	c
CCyUSBDevice	Headers/CyAPI.h	/^  CCyUSBDevice(HANDLE hnd = NULL, GUID guid = CYUSBDRV_GUID, BOOL bOpen = true);$/;"	p	class:CCyUSBDevice	access:public	signature:(HANDLE hnd = NULL, GUID guid = CYUSBDRV_GUID, BOOL bOpen = true)
CCyUSBDevice::CCyUSBDevice	Headers/CyAPI.h	/^  CCyUSBDevice(HANDLE hnd = NULL, GUID guid = CYUSBDRV_GUID, BOOL bOpen = true);$/;"	p	class:CCyUSBDevice	access:public	signature:(HANDLE hnd = NULL, GUID guid = CYUSBDRV_GUID, BOOL bOpen = true)
~CCyUSBDevice	Headers/CyAPI.h	/^  ~CCyUSBDevice(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::~CCyUSBDevice	Headers/CyAPI.h	/^  ~CCyUSBDevice(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
EndPoints	Headers/CyAPI.h	/^  CCyUSBEndPoint      **EndPoints;     \/\/ Shortcut to USBCfgs[CfgNum]->Interfaces[IntfcIndex]->Endpoints$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::EndPoints	Headers/CyAPI.h	/^  CCyUSBEndPoint      **EndPoints;     \/\/ Shortcut to USBCfgs[CfgNum]->Interfaces[IntfcIndex]->Endpoints$/;"	m	class:CCyUSBDevice	access:public
EndPointOf	Headers/CyAPI.h	/^  CCyUSBEndPoint       *EndPointOf(UCHAR addr);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR addr)
CCyUSBDevice::EndPointOf	Headers/CyAPI.h	/^  CCyUSBEndPoint       *EndPointOf(UCHAR addr);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR addr)
ControlEndPt	Headers/CyAPI.h	/^  CCyControlEndPoint   *ControlEndPt;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::ControlEndPt	Headers/CyAPI.h	/^  CCyControlEndPoint   *ControlEndPt;$/;"	m	class:CCyUSBDevice	access:public
IsocInEndPt	Headers/CyAPI.h	/^  CCyIsocEndPoint      *IsocInEndPt;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::IsocInEndPt	Headers/CyAPI.h	/^  CCyIsocEndPoint      *IsocInEndPt;$/;"	m	class:CCyUSBDevice	access:public
IsocOutEndPt	Headers/CyAPI.h	/^  CCyIsocEndPoint      *IsocOutEndPt;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::IsocOutEndPt	Headers/CyAPI.h	/^  CCyIsocEndPoint      *IsocOutEndPt;$/;"	m	class:CCyUSBDevice	access:public
BulkInEndPt	Headers/CyAPI.h	/^  CCyBulkEndPoint      *BulkInEndPt;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::BulkInEndPt	Headers/CyAPI.h	/^  CCyBulkEndPoint      *BulkInEndPt;$/;"	m	class:CCyUSBDevice	access:public
BulkOutEndPt	Headers/CyAPI.h	/^  CCyBulkEndPoint      *BulkOutEndPt;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::BulkOutEndPt	Headers/CyAPI.h	/^  CCyBulkEndPoint      *BulkOutEndPt;$/;"	m	class:CCyUSBDevice	access:public
InterruptInEndPt	Headers/CyAPI.h	/^  CCyInterruptEndPoint *InterruptInEndPt;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::InterruptInEndPt	Headers/CyAPI.h	/^  CCyInterruptEndPoint *InterruptInEndPt;$/;"	m	class:CCyUSBDevice	access:public
InterruptOutEndPt	Headers/CyAPI.h	/^  CCyInterruptEndPoint *InterruptOutEndPt;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::InterruptOutEndPt	Headers/CyAPI.h	/^  CCyInterruptEndPoint *InterruptOutEndPt;$/;"	m	class:CCyUSBDevice	access:public
StrLangID	Headers/CyAPI.h	/^  USHORT                StrLangID;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::StrLangID	Headers/CyAPI.h	/^  USHORT                StrLangID;$/;"	m	class:CCyUSBDevice	access:public
UsbdStatus	Headers/CyAPI.h	/^  ULONG                 UsbdStatus;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::UsbdStatus	Headers/CyAPI.h	/^  ULONG                 UsbdStatus;$/;"	m	class:CCyUSBDevice	access:public
NtStatus	Headers/CyAPI.h	/^  ULONG                 NtStatus;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::NtStatus	Headers/CyAPI.h	/^  ULONG                 NtStatus;$/;"	m	class:CCyUSBDevice	access:public
DriverVersion	Headers/CyAPI.h	/^  ULONG                 DriverVersion;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::DriverVersion	Headers/CyAPI.h	/^  ULONG                 DriverVersion;$/;"	m	class:CCyUSBDevice	access:public
USBDIVersion	Headers/CyAPI.h	/^  ULONG                 USBDIVersion;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::USBDIVersion	Headers/CyAPI.h	/^  ULONG                 USBDIVersion;$/;"	m	class:CCyUSBDevice	access:public
DeviceName	Headers/CyAPI.h	/^  char                  DeviceName[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::DeviceName	Headers/CyAPI.h	/^  char                  DeviceName[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
FriendlyName	Headers/CyAPI.h	/^  char                  FriendlyName[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::FriendlyName	Headers/CyAPI.h	/^  char                  FriendlyName[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
Manufacturer	Headers/CyAPI.h	/^  wchar_t               Manufacturer[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::Manufacturer	Headers/CyAPI.h	/^  wchar_t               Manufacturer[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
Product	Headers/CyAPI.h	/^  wchar_t               Product[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::Product	Headers/CyAPI.h	/^  wchar_t               Product[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
SerialNumber	Headers/CyAPI.h	/^  wchar_t               SerialNumber[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::SerialNumber	Headers/CyAPI.h	/^  wchar_t               SerialNumber[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
DevPath	Headers/CyAPI.h	/^  CHAR                  DevPath[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::DevPath	Headers/CyAPI.h	/^  CHAR                  DevPath[USB_STRING_MAXLEN];$/;"	m	class:CCyUSBDevice	access:public
BcdUSB	Headers/CyAPI.h	/^  USHORT                BcdUSB;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::BcdUSB	Headers/CyAPI.h	/^  USHORT                BcdUSB;$/;"	m	class:CCyUSBDevice	access:public
VendorID	Headers/CyAPI.h	/^  USHORT                VendorID;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::VendorID	Headers/CyAPI.h	/^  USHORT                VendorID;$/;"	m	class:CCyUSBDevice	access:public
ProductID	Headers/CyAPI.h	/^  USHORT                ProductID;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::ProductID	Headers/CyAPI.h	/^  USHORT                ProductID;$/;"	m	class:CCyUSBDevice	access:public
USBAddress	Headers/CyAPI.h	/^  UCHAR                 USBAddress;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::USBAddress	Headers/CyAPI.h	/^  UCHAR                 USBAddress;$/;"	m	class:CCyUSBDevice	access:public
DevClass	Headers/CyAPI.h	/^  UCHAR                 DevClass;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::DevClass	Headers/CyAPI.h	/^  UCHAR                 DevClass;$/;"	m	class:CCyUSBDevice	access:public
DevSubClass	Headers/CyAPI.h	/^  UCHAR                 DevSubClass;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::DevSubClass	Headers/CyAPI.h	/^  UCHAR                 DevSubClass;$/;"	m	class:CCyUSBDevice	access:public
DevProtocol	Headers/CyAPI.h	/^  UCHAR                 DevProtocol;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::DevProtocol	Headers/CyAPI.h	/^  UCHAR                 DevProtocol;$/;"	m	class:CCyUSBDevice	access:public
MaxPacketSize	Headers/CyAPI.h	/^  UCHAR                 MaxPacketSize;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::MaxPacketSize	Headers/CyAPI.h	/^  UCHAR                 MaxPacketSize;$/;"	m	class:CCyUSBDevice	access:public
BcdDevice	Headers/CyAPI.h	/^  USHORT                BcdDevice;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::BcdDevice	Headers/CyAPI.h	/^  USHORT                BcdDevice;$/;"	m	class:CCyUSBDevice	access:public
ConfigValue	Headers/CyAPI.h	/^  UCHAR                 ConfigValue;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::ConfigValue	Headers/CyAPI.h	/^  UCHAR                 ConfigValue;$/;"	m	class:CCyUSBDevice	access:public
ConfigAttrib	Headers/CyAPI.h	/^  UCHAR                 ConfigAttrib;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::ConfigAttrib	Headers/CyAPI.h	/^  UCHAR                 ConfigAttrib;$/;"	m	class:CCyUSBDevice	access:public
MaxPower	Headers/CyAPI.h	/^  UCHAR                 MaxPower;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::MaxPower	Headers/CyAPI.h	/^  UCHAR                 MaxPower;$/;"	m	class:CCyUSBDevice	access:public
IntfcClass	Headers/CyAPI.h	/^  UCHAR                 IntfcClass;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::IntfcClass	Headers/CyAPI.h	/^  UCHAR                 IntfcClass;$/;"	m	class:CCyUSBDevice	access:public
IntfcSubClass	Headers/CyAPI.h	/^  UCHAR                 IntfcSubClass;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::IntfcSubClass	Headers/CyAPI.h	/^  UCHAR                 IntfcSubClass;$/;"	m	class:CCyUSBDevice	access:public
IntfcProtocol	Headers/CyAPI.h	/^  UCHAR                 IntfcProtocol;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::IntfcProtocol	Headers/CyAPI.h	/^  UCHAR                 IntfcProtocol;$/;"	m	class:CCyUSBDevice	access:public
bHighSpeed	Headers/CyAPI.h	/^  bool                  bHighSpeed;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::bHighSpeed	Headers/CyAPI.h	/^  bool                  bHighSpeed;$/;"	m	class:CCyUSBDevice	access:public
BytesXfered	Headers/CyAPI.h	/^  DWORD                 BytesXfered;$/;"	m	class:CCyUSBDevice	access:public
CCyUSBDevice::BytesXfered	Headers/CyAPI.h	/^  DWORD                 BytesXfered;$/;"	m	class:CCyUSBDevice	access:public
DeviceCount	Headers/CyAPI.h	/^  UCHAR                 DeviceCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::DeviceCount	Headers/CyAPI.h	/^  UCHAR                 DeviceCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
ConfigCount	Headers/CyAPI.h	/^  UCHAR                 ConfigCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::ConfigCount	Headers/CyAPI.h	/^  UCHAR                 ConfigCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
IntfcCount	Headers/CyAPI.h	/^  UCHAR                 IntfcCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::IntfcCount	Headers/CyAPI.h	/^  UCHAR                 IntfcCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
AltIntfcCount	Headers/CyAPI.h	/^  UCHAR                 AltIntfcCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::AltIntfcCount	Headers/CyAPI.h	/^  UCHAR                 AltIntfcCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
EndPointCount	Headers/CyAPI.h	/^  UCHAR                 EndPointCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::EndPointCount	Headers/CyAPI.h	/^  UCHAR                 EndPointCount(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
Config	Headers/CyAPI.h	/^  UCHAR                 Config(void)     { return CfgNum; }    \/\/ Normally 0$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::Config	Headers/CyAPI.h	/^  UCHAR                 Config(void)     { return CfgNum; }    \/\/ Normally 0$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
SetConfig	Headers/CyAPI.h	/^  void                  SetConfig(UCHAR cfg);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR cfg)
CCyUSBDevice::SetConfig	Headers/CyAPI.h	/^  void                  SetConfig(UCHAR cfg);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR cfg)
Interface	Headers/CyAPI.h	/^  UCHAR                 Interface(void)  { return IntfcNum; }  \/\/ Usually 0$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::Interface	Headers/CyAPI.h	/^  UCHAR                 Interface(void)  { return IntfcNum; }  \/\/ Usually 0$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
AltIntfc	Headers/CyAPI.h	/^  UCHAR                 AltIntfc(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::AltIntfc	Headers/CyAPI.h	/^  UCHAR                 AltIntfc(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
SetAltIntfc	Headers/CyAPI.h	/^  bool                  SetAltIntfc(UCHAR alt);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR alt)
CCyUSBDevice::SetAltIntfc	Headers/CyAPI.h	/^  bool                  SetAltIntfc(UCHAR alt);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR alt)
DriverGUID	Headers/CyAPI.h	/^  GUID                  DriverGUID(void) { return DrvGuid; }$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::DriverGUID	Headers/CyAPI.h	/^  GUID                  DriverGUID(void) { return DrvGuid; }$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
DeviceHandle	Headers/CyAPI.h	/^  HANDLE                DeviceHandle(void) { return hDevice; }$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::DeviceHandle	Headers/CyAPI.h	/^  HANDLE                DeviceHandle(void) { return hDevice; }$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
UsbdStatusString	Headers/CyAPI.h	/^  void                  UsbdStatusString(ULONG stat, PCHAR s);$/;"	p	class:CCyUSBDevice	access:public	signature:(ULONG stat, PCHAR s)
CCyUSBDevice::UsbdStatusString	Headers/CyAPI.h	/^  void                  UsbdStatusString(ULONG stat, PCHAR s);$/;"	p	class:CCyUSBDevice	access:public	signature:(ULONG stat, PCHAR s)
CreateHandle	Headers/CyAPI.h	/^  bool                  CreateHandle(UCHAR dev);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR dev)
CCyUSBDevice::CreateHandle	Headers/CyAPI.h	/^  bool                  CreateHandle(UCHAR dev);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR dev)
DestroyHandle	Headers/CyAPI.h	/^  void                  DestroyHandle();$/;"	p	class:CCyUSBDevice	access:public	signature:()
CCyUSBDevice::DestroyHandle	Headers/CyAPI.h	/^  void                  DestroyHandle();$/;"	p	class:CCyUSBDevice	access:public	signature:()
Open	Headers/CyAPI.h	/^  bool                  Open(UCHAR dev);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR dev)
CCyUSBDevice::Open	Headers/CyAPI.h	/^  bool                  Open(UCHAR dev);$/;"	p	class:CCyUSBDevice	access:public	signature:(UCHAR dev)
Close	Headers/CyAPI.h	/^  void                  Close(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::Close	Headers/CyAPI.h	/^  void                  Close(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
Reset	Headers/CyAPI.h	/^  bool                  Reset(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::Reset	Headers/CyAPI.h	/^  bool                  Reset(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
ReConnect	Headers/CyAPI.h	/^  bool                  ReConnect(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::ReConnect	Headers/CyAPI.h	/^  bool                  ReConnect(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
Suspend	Headers/CyAPI.h	/^  bool                  Suspend(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::Suspend	Headers/CyAPI.h	/^  bool                  Suspend(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
Resume	Headers/CyAPI.h	/^  bool                  Resume(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::Resume	Headers/CyAPI.h	/^  bool                  Resume(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
IsOpen	Headers/CyAPI.h	/^  bool                  IsOpen(void)      { return (hDevice != INVALID_HANDLE_VALUE); }$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::IsOpen	Headers/CyAPI.h	/^  bool                  IsOpen(void)      { return (hDevice != INVALID_HANDLE_VALUE); }$/;"	f	class:CCyUSBDevice	access:public	signature:(void)
PowerState	Headers/CyAPI.h	/^  UCHAR                 PowerState(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
CCyUSBDevice::PowerState	Headers/CyAPI.h	/^  UCHAR                 PowerState(void);$/;"	p	class:CCyUSBDevice	access:public	signature:(void)
GetDeviceDescriptor	Headers/CyAPI.h	/^  void                  GetDeviceDescriptor(PUSB_DEVICE_DESCRIPTOR descr);$/;"	p	class:CCyUSBDevice	access:public	signature:(PUSB_DEVICE_DESCRIPTOR descr)
CCyUSBDevice::GetDeviceDescriptor	Headers/CyAPI.h	/^  void                  GetDeviceDescriptor(PUSB_DEVICE_DESCRIPTOR descr);$/;"	p	class:CCyUSBDevice	access:public	signature:(PUSB_DEVICE_DESCRIPTOR descr)
GetConfigDescriptor	Headers/CyAPI.h	/^  void                  GetConfigDescriptor(PUSB_CONFIGURATION_DESCRIPTOR descr);$/;"	p	class:CCyUSBDevice	access:public	signature:(PUSB_CONFIGURATION_DESCRIPTOR descr)
CCyUSBDevice::GetConfigDescriptor	Headers/CyAPI.h	/^  void                  GetConfigDescriptor(PUSB_CONFIGURATION_DESCRIPTOR descr);$/;"	p	class:CCyUSBDevice	access:public	signature:(PUSB_CONFIGURATION_DESCRIPTOR descr)
GetIntfcDescriptor	Headers/CyAPI.h	/^  void                  GetIntfcDescriptor(PUSB_INTERFACE_DESCRIPTOR descr);$/;"	p	class:CCyUSBDevice	access:public	signature:(PUSB_INTERFACE_DESCRIPTOR descr)
CCyUSBDevice::GetIntfcDescriptor	Headers/CyAPI.h	/^  void                  GetIntfcDescriptor(PUSB_INTERFACE_DESCRIPTOR descr);$/;"	p	class:CCyUSBDevice	access:public	signature:(PUSB_INTERFACE_DESCRIPTOR descr)
GetUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig          GetUSBConfig(int index);$/;"	p	class:CCyUSBDevice	access:public	signature:(int index)
CCyUSBDevice::GetUSBConfig	Headers/CyAPI.h	/^  CCyUSBConfig          GetUSBConfig(int index);$/;"	p	class:CCyUSBDevice	access:public	signature:(int index)
USBDeviceDescriptor	Headers/CyAPI.h	/^  USB_DEVICE_DESCRIPTOR         USBDeviceDescriptor;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::USBDeviceDescriptor	Headers/CyAPI.h	/^  USB_DEVICE_DESCRIPTOR         USBDeviceDescriptor;$/;"	m	class:CCyUSBDevice	access:private
USBConfigDescriptors	Headers/CyAPI.h	/^  PUSB_CONFIGURATION_DESCRIPTOR USBConfigDescriptors[2];$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::USBConfigDescriptors	Headers/CyAPI.h	/^  PUSB_CONFIGURATION_DESCRIPTOR USBConfigDescriptors[2];$/;"	m	class:CCyUSBDevice	access:private
USBCfgs	Headers/CyAPI.h	/^  CCyUSBConfig                 *USBCfgs[2];$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::USBCfgs	Headers/CyAPI.h	/^  CCyUSBConfig                 *USBCfgs[2];$/;"	m	class:CCyUSBDevice	access:private
hWnd	Headers/CyAPI.h	/^  HANDLE                        hWnd;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::hWnd	Headers/CyAPI.h	/^  HANDLE                        hWnd;$/;"	m	class:CCyUSBDevice	access:private
hDevice	Headers/CyAPI.h	/^  HANDLE                        hDevice;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::hDevice	Headers/CyAPI.h	/^  HANDLE                        hDevice;$/;"	m	class:CCyUSBDevice	access:private
hDevNotification	Headers/CyAPI.h	/^  HANDLE                        hDevNotification;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::hDevNotification	Headers/CyAPI.h	/^  HANDLE                        hDevNotification;$/;"	m	class:CCyUSBDevice	access:private
hHndNotification	Headers/CyAPI.h	/^  HANDLE                        hHndNotification;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::hHndNotification	Headers/CyAPI.h	/^  HANDLE                        hHndNotification;$/;"	m	class:CCyUSBDevice	access:private
DrvGuid	Headers/CyAPI.h	/^  GUID                          DrvGuid;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::DrvGuid	Headers/CyAPI.h	/^  GUID                          DrvGuid;$/;"	m	class:CCyUSBDevice	access:private
Devices	Headers/CyAPI.h	/^  UCHAR                         Devices;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::Devices	Headers/CyAPI.h	/^  UCHAR                         Devices;$/;"	m	class:CCyUSBDevice	access:private
Interfaces	Headers/CyAPI.h	/^  UCHAR                         Interfaces;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::Interfaces	Headers/CyAPI.h	/^  UCHAR                         Interfaces;$/;"	m	class:CCyUSBDevice	access:private
AltInterfaces	Headers/CyAPI.h	/^  UCHAR                         AltInterfaces;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::AltInterfaces	Headers/CyAPI.h	/^  UCHAR                         AltInterfaces;$/;"	m	class:CCyUSBDevice	access:private
Configs	Headers/CyAPI.h	/^  UCHAR                         Configs;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::Configs	Headers/CyAPI.h	/^  UCHAR                         Configs;$/;"	m	class:CCyUSBDevice	access:private
DevNum	Headers/CyAPI.h	/^  UCHAR                         DevNum;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::DevNum	Headers/CyAPI.h	/^  UCHAR                         DevNum;$/;"	m	class:CCyUSBDevice	access:private
CfgNum	Headers/CyAPI.h	/^  UCHAR                         CfgNum;$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::CfgNum	Headers/CyAPI.h	/^  UCHAR                         CfgNum;$/;"	m	class:CCyUSBDevice	access:private
IntfcNum	Headers/CyAPI.h	/^  UCHAR                         IntfcNum;     \/\/ The current selected interface's bInterfaceNumber$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::IntfcNum	Headers/CyAPI.h	/^  UCHAR                         IntfcNum;     \/\/ The current selected interface's bInterfaceNumber$/;"	m	class:CCyUSBDevice	access:private
IntfcIndex	Headers/CyAPI.h	/^  UCHAR                         IntfcIndex;   \/\/ The entry in the Config's interfaces table matching to IntfcNum and AltSetting$/;"	m	class:CCyUSBDevice	access:private
CCyUSBDevice::IntfcIndex	Headers/CyAPI.h	/^  UCHAR                         IntfcIndex;   \/\/ The entry in the Config's interfaces table matching to IntfcNum and AltSetting$/;"	m	class:CCyUSBDevice	access:private
GetDevDescriptor	Headers/CyAPI.h	/^  void                          GetDevDescriptor(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::GetDevDescriptor	Headers/CyAPI.h	/^  void                          GetDevDescriptor(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
GetCfgDescriptor	Headers/CyAPI.h	/^  void                          GetCfgDescriptor(int descIndex);$/;"	p	class:CCyUSBDevice	access:private	signature:(int descIndex)
CCyUSBDevice::GetCfgDescriptor	Headers/CyAPI.h	/^  void                          GetCfgDescriptor(int descIndex);$/;"	p	class:CCyUSBDevice	access:private	signature:(int descIndex)
GetString	Headers/CyAPI.h	/^  void                          GetString(wchar_t *s, UCHAR sIndex);$/;"	p	class:CCyUSBDevice	access:private	signature:(wchar_t *s, UCHAR sIndex)
CCyUSBDevice::GetString	Headers/CyAPI.h	/^  void                          GetString(wchar_t *s, UCHAR sIndex);$/;"	p	class:CCyUSBDevice	access:private	signature:(wchar_t *s, UCHAR sIndex)
SetStringDescrLanguage	Headers/CyAPI.h	/^  void                          SetStringDescrLanguage(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::SetStringDescrLanguage	Headers/CyAPI.h	/^  void                          SetStringDescrLanguage(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
SetAltIntfcParams	Headers/CyAPI.h	/^  void                          SetAltIntfcParams(UCHAR alt);$/;"	p	class:CCyUSBDevice	access:private	signature:(UCHAR alt)
CCyUSBDevice::SetAltIntfcParams	Headers/CyAPI.h	/^  void                          SetAltIntfcParams(UCHAR alt);$/;"	p	class:CCyUSBDevice	access:private	signature:(UCHAR alt)
IoControl	Headers/CyAPI.h	/^  bool                          IoControl(ULONG cmd, PUCHAR buf, ULONG len);$/;"	p	class:CCyUSBDevice	access:private	signature:(ULONG cmd, PUCHAR buf, ULONG len)
CCyUSBDevice::IoControl	Headers/CyAPI.h	/^  bool                          IoControl(ULONG cmd, PUCHAR buf, ULONG len);$/;"	p	class:CCyUSBDevice	access:private	signature:(ULONG cmd, PUCHAR buf, ULONG len)
SetEndPointPtrs	Headers/CyAPI.h	/^  void                          SetEndPointPtrs(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::SetEndPointPtrs	Headers/CyAPI.h	/^  void                          SetEndPointPtrs(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
GetDeviceName	Headers/CyAPI.h	/^  void                          GetDeviceName(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::GetDeviceName	Headers/CyAPI.h	/^  void                          GetDeviceName(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
GetFriendlyName	Headers/CyAPI.h	/^  void                          GetFriendlyName(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::GetFriendlyName	Headers/CyAPI.h	/^  void                          GetFriendlyName(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
GetDriverVer	Headers/CyAPI.h	/^  void                          GetDriverVer(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::GetDriverVer	Headers/CyAPI.h	/^  void                          GetDriverVer(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
GetUSBDIVer	Headers/CyAPI.h	/^  void                          GetUSBDIVer(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::GetUSBDIVer	Headers/CyAPI.h	/^  void                          GetUSBDIVer(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
GetSpeed	Headers/CyAPI.h	/^  void                          GetSpeed(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::GetSpeed	Headers/CyAPI.h	/^  void                          GetSpeed(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
GetUSBAddress	Headers/CyAPI.h	/^  void                          GetUSBAddress(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
CCyUSBDevice::GetUSBAddress	Headers/CyAPI.h	/^  void                          GetUSBAddress(void);$/;"	p	class:CCyUSBDevice	access:private	signature:(void)
RegisterForPnpEvents	Headers/CyAPI.h	/^  bool                          RegisterForPnpEvents(HANDLE h);$/;"	p	class:CCyUSBDevice	access:private	signature:(HANDLE h)
CCyUSBDevice::RegisterForPnpEvents	Headers/CyAPI.h	/^  bool                          RegisterForPnpEvents(HANDLE h);$/;"	p	class:CCyUSBDevice	access:private	signature:(HANDLE h)
D4100_usb.h	Headers/D4100_usb.h	1;"	F
DLL_EXPORT	Headers/D4100_usb.h	/^#define DLL_EXPORT$/;"	d
USB_DLL	Headers/D4100_usb.h	/^#define USB_DLL /;"	d
USB_DLL	Headers/D4100_usb.h	/^#define USB_DLL /;"	d
UNICODE	Headers/D4100_usb.h	/^#undef UNICODE /;"	d
GetNumDev	Headers/D4100_usb.h	/^	USB_DLL short int GetNumDev();$/;"	p	signature:()
GetDescriptor	Headers/D4100_usb.h	/^	USB_DLL int GetDescriptor(int* Array, short int DeviceNum);$/;"	p	signature:(int* Array, short int DeviceNum)
GetFirmwareRev	Headers/D4100_usb.h	/^	USB_DLL unsigned int GetFirmwareRev(short int DeviceNumber);$/;"	p	signature:(short int DeviceNumber)
GetDriverRev	Headers/D4100_usb.h	/^	USB_DLL unsigned int GetDriverRev(short int DeviceNumber);$/;"	p	signature:(short int DeviceNumber)
GetDLLRev	Headers/D4100_usb.h	/^	USB_DLL long GetDLLRev();$/;"	p	signature:()
GetUsbSpeed	Headers/D4100_usb.h	/^	USB_DLL short int GetUsbSpeed(short int DeviceNumber);$/;"	p	signature:(short int DeviceNumber)
program_FPGA	Headers/D4100_usb.h	/^	USB_DLL int program_FPGA(UCHAR *write_buffer, LONG write_size, short int DeviceNumber);$/;"	p	signature:(UCHAR *write_buffer, LONG write_size, short int DeviceNumber)
LoadControl	Headers/D4100_usb.h	/^	USB_DLL short LoadControl(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
ClearFifos	Headers/D4100_usb.h	/^	USB_DLL short ClearFifos(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
LoadData	Headers/D4100_usb.h	/^	USB_DLL int LoadData(UCHAR* RowData, long length, short DMDType, short DeviceNumber);$/;"	p	signature:(UCHAR* RowData, long length, short DMDType, short DeviceNumber)
SetBlkMd	Headers/D4100_usb.h	/^	USB_DLL short SetBlkMd(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetBlkMd	Headers/D4100_usb.h	/^	USB_DLL short GetBlkMd(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetBlkAd	Headers/D4100_usb.h	/^	USB_DLL short SetBlkAd(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetBlkAd	Headers/D4100_usb.h	/^	USB_DLL short GetBlkAd(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetRST2BLKZ	Headers/D4100_usb.h	/^	USB_DLL short SetRST2BLKZ(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetRST2BLKZ	Headers/D4100_usb.h	/^	USB_DLL short GetRST2BLKZ(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetRowMd	Headers/D4100_usb.h	/^	USB_DLL short SetRowMd(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetRowMd	Headers/D4100_usb.h	/^	USB_DLL short GetRowMd(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetRowAddr	Headers/D4100_usb.h	/^	USB_DLL short SetRowAddr(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetRowAddr	Headers/D4100_usb.h	/^	USB_DLL short GetRowAddr(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetSTEPVCC	Headers/D4100_usb.h	/^	USB_DLL short SetSTEPVCC(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetSTEPVCC	Headers/D4100_usb.h	/^	USB_DLL short GetSTEPVCC(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetCOMPDATA	Headers/D4100_usb.h	/^	USB_DLL short SetCOMPDATA(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetCOMPDATA	Headers/D4100_usb.h	/^	USB_DLL short GetCOMPDATA(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetNSFLIP	Headers/D4100_usb.h	/^	USB_DLL short SetNSFLIP(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetNSFLIP	Headers/D4100_usb.h	/^	USB_DLL short GetNSFLIP( short DeviceNumber);$/;"	p	signature:( short DeviceNumber)
SetWDT	Headers/D4100_usb.h	/^	USB_DLL short SetWDT(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetWDT	Headers/D4100_usb.h	/^	USB_DLL short GetWDT(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetPWRFLOAT	Headers/D4100_usb.h	/^	USB_DLL short SetPWRFLOAT(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetPWRFLOAT	Headers/D4100_usb.h	/^	USB_DLL short GetPWRFLOAT(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetEXTRESETENBL	Headers/D4100_usb.h	/^	USB_DLL short SetEXTRESETENBL(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetEXTRESETENBL	Headers/D4100_usb.h	/^	USB_DLL short GetEXTRESETENBL(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
SetGPIO	Headers/D4100_usb.h	/^	USB_DLL short SetGPIO(short value, short DeviceNumber);$/;"	p	signature:(short value, short DeviceNumber)
GetGPIO	Headers/D4100_usb.h	/^	USB_DLL short GetGPIO(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
GetDMDTYPE	Headers/D4100_usb.h	/^	USB_DLL short GetDMDTYPE(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
GetDDCVERSION	Headers/D4100_usb.h	/^	USB_DLL short GetDDCVERSION(short DeviceNumber);$/;"	p	signature:(short DeviceNumber)
GetFPGARev	Headers/D4100_usb.h	/^	USB_DLL unsigned int GetFPGARev(short int DeviceNumber);$/;"	p	signature:(short int DeviceNumber)
GetRESETCOMPLETE	Headers/D4100_usb.h	/^	USB_DLL short GetRESETCOMPLETE(int waittime, short int DeviceNumber);$/;"	p	signature:(int waittime, short int DeviceNumber)
SetGPIORESETCOMPLETE	Headers/D4100_usb.h	/^	USB_DLL short SetGPIORESETCOMPLETE(short int DeviceNumber);$/;"	p	signature:(short int DeviceNumber)
RegisterDefines.h	Headers/RegisterDefines.h	1;"	F
D4100_ADDR_DMDTYPE	Headers/RegisterDefines.h	/^#define D4100_ADDR_DMDTYPE	/;"	d
D4100_ADDR_DDCVERSION	Headers/RegisterDefines.h	/^#define	D4100_ADDR_DDCVERSION	/;"	d
D4100_ADDR_BLKMD	Headers/RegisterDefines.h	/^#define D4100_ADDR_BLKMD	/;"	d
D4100_ADDR_BLKAD	Headers/RegisterDefines.h	/^#define D4100_ADDR_BLKAD	/;"	d
D4100_ADDR_ROWMD	Headers/RegisterDefines.h	/^#define D4100_ADDR_ROWMD	/;"	d
D4100_ADDR_ROWAD	Headers/RegisterDefines.h	/^#define D4100_ADDR_ROWAD	/;"	d
D4100_ADDR_CTL1	Headers/RegisterDefines.h	/^#define D4100_ADDR_CTL1	/;"	d
D4100_ADDR_CTL2	Headers/RegisterDefines.h	/^#define D4100_ADDR_CTL2	/;"	d
D4100_ADDR_GPIO	Headers/RegisterDefines.h	/^#define	D4100_ADDR_GPIO	/;"	d
D4100_ADDR_NUMROWS	Headers/RegisterDefines.h	/^#define D4100_ADDR_NUMROWS /;"	d
D4100_RESET_COMPLETE	Headers/RegisterDefines.h	/^#define D4100_RESET_COMPLETE	/;"	d
D4100_GPIORESETFLAG	Headers/RegisterDefines.h	/^#define D4100_GPIORESETFLAG	/;"	d
D4100_CTLBIT_WRITEBLOCK	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_WRITEBLOCK	/;"	d
D4100_CTLBIT_RESETCMLPT	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_RESETCMLPT /;"	d
D4100_CTLBIT_CLRFIFO	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_CLRFIFO	/;"	d
D4100_CTLBIT_STEPVCC	Headers/RegisterDefines.h	/^#define	D4100_CTLBIT_STEPVCC	/;"	d
D4100_CTLBIT_COMPDATA	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_COMPDATA	/;"	d
D4100_CTLBIT_NSFLIP	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_NSFLIP	/;"	d
D4100_CTLBIT_WDT	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_WDT	/;"	d
D4100_CTLBIT_PWRFLOATZ	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_PWRFLOATZ	/;"	d
D4100_CTLBIT_EXTRESET	Headers/RegisterDefines.h	/^#define D4100_CTLBIT_EXTRESET	/;"	d
D4100_CTLBIT_RST2BLKZ	Headers/RegisterDefines.h	/^#define	D4100_CTLBIT_RST2BLKZ	/;"	d
D4100_BLKMD_NOOP	Headers/RegisterDefines.h	/^#define D4100_BLKMD_NOOP	/;"	d
D4100_BLKMD_CLBLK	Headers/RegisterDefines.h	/^#define D4100_BLKMD_CLBLK /;"	d
D4100_BLKMD_RSTBLK	Headers/RegisterDefines.h	/^#define D4100_BLKMD_RSTBLK	/;"	d
D4100_BLKMD_11	Headers/RegisterDefines.h	/^#define D4100_BLKMD_11	/;"	d
D4100_ROWMD_NOOP	Headers/RegisterDefines.h	/^#define D4100_ROWMD_NOOP	/;"	d
D4100_ROWMD_INC	Headers/RegisterDefines.h	/^#define D4100_ROWMD_INC	/;"	d
D4100_ROWMD_SET	Headers/RegisterDefines.h	/^#define D4100_ROWMD_SET	/;"	d
D4100_ROWMD_SETPNT	Headers/RegisterDefines.h	/^#define D4100_ROWMD_SETPNT	/;"	d
